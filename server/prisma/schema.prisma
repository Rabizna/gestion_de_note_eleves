// server/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PROVISEUR
  PROFESSEUR
}

model User {
  id           Int      @id @default(autoincrement())
  fullName     String
  email        String   @unique
  password     String
  role         Role
  profileImage String?
  createdAt    DateTime @default(now())

  /// --- Attributs "titulaire" (Classe = Niveau + Section) ---
  /// Toujours NULL pour PROVISEUR ; pour PROFESSEUR => indique sa classe de titularisation
  titulaireNiveauId  Int?     @map("titulaire_niveau_id")
  titulaireSectionId Int?     @map("titulaire_section_id")

  /// Relations dédiées (avec noms explicites) + côté opposé dans Niveau/Section
  titulaireNiveau  Niveau?  @relation("UserTitulaireNiveau", fields: [titulaireNiveauId], references: [id], onDelete: SetNull)
  titulaireSection Section? @relation("UserTitulaireSection", fields: [titulaireSectionId], references: [id], onDelete: SetNull)

  /// Un(e) seul(e) titulaire par (Niveau, Section) quand les deux sont non-NULL
  @@unique([titulaireNiveauId, titulaireSectionId], name: "uq_user_titulaire_niveau_section")
}

model Eleve {
  id     Int     @id @default(autoincrement()) @map("id_eleve")
  nom    String? @db.VarChar(100)
  prenom String? @db.VarChar(100)

  inscrit    Boolean @default(false)
  redoublant Boolean @default(false)
  renvoye    Boolean @default(false)

  dateNais DateTime? @map("date_nais") @db.Date
  lieuNais String?   @map("lieu_nais") @db.VarChar(100)
  sexe     String?   @db.VarChar(20)

  photo      Bytes?
  numeroActe String? @map("numero_acte") @db.VarChar(100)

  domicile String? @db.VarChar(255)
  distance String? @db.VarChar(5)

  nbrSoeur Int? @map("nbr_soeur")
  nbrFrere Int? @map("nbr_frere")

  nomPere        String? @map("nom_pere") @db.VarChar(100)
  professionPere String? @map("profession_pere") @db.VarChar(100)
  telephonePere  String? @map("telephone_pere") @db.VarChar(20)

  nomMere        String? @map("nom_mere") @db.VarChar(100)
  professionMere String? @map("profession_mere") @db.VarChar(100)
  telephoneMere  String? @map("telephone_mere") @db.VarChar(20)

  nomTuteur        String? @map("nom_tuteur") @db.VarChar(100)
  professionTuteur String? @map("profession_tuteur") @db.VarChar(100)
  telephoneTuteur  String? @map("telephone_tuteur") @db.VarChar(20)

  telephone String? @unique @db.VarChar(20)
  numero    Int?
  matricule Int? @unique

  niveauId  Int?     @map("id_niveau")
  sectionId Int?     @map("id_section")
  niveau    Niveau?  @relation(fields: [niveauId], references: [id])
  section   Section? @relation(fields: [sectionId], references: [id])

  createdAt DateTime @default(now())

  absences Absence[]
  notes    Note[]

  @@map("eleve")
}

model Niveau {
  id  Int    @id
  nom String @map("nom_niveau") @db.VarChar(100)

  eleves       Eleve[]
  absences     Absence[]
  coefficients Coefficient[]

  /// Côté opposé de la relation User.titulaireNiveau
  titulaires   User[] @relation("UserTitulaireNiveau")

  @@map("niveau")
}

model Section {
  id  Int    @id @default(autoincrement()) @map("id_section")
  nom String @map("nom_section") @db.VarChar(100)

  eleves       Eleve[]
  absences     Absence[]
  coefficients Coefficient[]

  /// Côté opposé de la relation User.titulaireSection
  titulaires   User[] @relation("UserTitulaireSection")

  @@map("section")
}

/**
 * Matières (nom_matiere et code_matiere uniques)
 */
model Matiere {
  id   Int    @id @default(autoincrement()) @map("id_matiere")
  nom  String @unique @map("nom_matiere") @db.VarChar(150)
  code String @unique @map("code_matiere") @db.VarChar(10)

  coefficients Coefficient[]
  notes        Note[]

  @@map("matiere")
}

/**
 * Table des coefficients par (matiere, niveau, section)
 */
model Coefficient {
  id          Int @id @default(autoincrement()) @map("id_coefficient")
  matiereId   Int @map("id_matiere")
  niveauId    Int @map("id_niveau")
  sectionId   Int @map("id_section")
  coefficient Int

  matiere Matiere @relation(fields: [matiereId], references: [id], onDelete: Cascade)
  niveau  Niveau  @relation(fields: [niveauId], references: [id], onDelete: Cascade)
  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([matiereId, niveauId, sectionId], name: "uq_coeff_matiere_niveau_section")
  @@map("coefficient")
}

enum AbsPlage {
  MATIN
  APRES_MIDI
}

/// --- Enums pour la table note ---
enum Trimestre {
  TRIM1 @map("1er trimestre")
  TRIM2 @map("2eme trimestre")
  TRIM3 @map("3eme trimestre")
}

enum NoteStatut {
  NOTE_JOURNALIERE @map("Note Journalière")
  NOTE_EXAMEN      @map("Note Examen")
  NOTE_MOYENNE     @map("Note Moyenne")
  NOTE_TOTALE      @map("Note Totale")
}

/// --- Table NOTE ---
model Note {
  id        Int        @id @default(autoincrement()) @map("id_note")
  eleveId   Int        @map("id_eleve")
  matiereId Int        @map("id_matiere")
  trimestre Trimestre  @map("trimestre")

  note                Float? @map("note")
  noteTotalJournalier Float? @map("note_total_journalier")
  noteTotalExamen     Float? @map("note_total_examen")
  noteMoyenne         Float? @map("note_moyenne")
  noteTotal           Float? @map("note_total")

  // ⚠ statut devient obligatoire
  statut NoteStatut   @map("note_statut")

  eleve   Eleve   @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  matiere Matiere @relation(fields: [matiereId], references: [id], onDelete: Cascade)

  // ⚠ Unicité corrigée pour autoriser 2 lignes (journalière + examen)
  @@unique([eleveId, matiereId, trimestre, statut], name: "uq_note_eleve_matiere_trim_statut")

  @@index([eleveId], name: "idx_note_eleve")
  @@index([matiereId], name: "idx_note_matiere")
  @@map("note")
}

/// Table des absences
model Absence {
  id        Int      @id @default(autoincrement()) @map("id_Absence")
  eleveId   Int      @map("id_eleve")
  date      DateTime @map("date_absence") @db.Date
  plage     AbsPlage @map("plage")
  motif     String?  @db.VarChar(255)
  niveauId  Int?     @map("id_niveau")
  sectionId Int?     @map("id_section")

  eleve   Eleve    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  niveau  Niveau?  @relation(fields: [niveauId], references: [id], onDelete: SetNull)
  section Section? @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  @@unique([eleveId, date, plage], name: "uq_absence_eleve_date_plage")
  @@index([date], name: "idx_absence_date")
  @@index([niveauId, sectionId], name: "idx_absence_niv_sec")
  @@map("absence")
}
